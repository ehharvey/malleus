package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"log"

	"github.com/ehharvey/malleus/internal/graph"
	"github.com/ehharvey/malleus/internal/graph/model"
	"github.com/ehharvey/malleus/internal/graphqlglue"
	"github.com/ehharvey/malleus/internal/inventory"
	"github.com/ehharvey/malleus/internal/outcome"
)

// CreateDomain is the resolver for the createDomain field.
func (r *mutationResolver) CreateDomain(ctx context.Context, input model.NewDomain) (*model.Domain, error) {
	createDomainParams := inventory.CreateDomainParams{
		Name: input.Name,
	}
	log.Println("Received request CreateDomain")

	result := r.InventoryService.CreateDomain(
		ctx,
		createDomainParams,
		outcome.ValidationDetailLevel(outcome.ValidationReturnOnlyFailures),
	)

	if !result.Succeeded() {
		// err := fmt.Errorf("CreateDomain failed! %w", result.CombineErrors())
		// log.Println(err)
	}

	return graphqlglue.ServiceResultToGraphql(result, graphqlglue.DomainModelToGraphql)
}

// ListDomains is the resolver for the listDomains field.
func (r *queryResolver) ListDomains(ctx context.Context) ([]*model.Domain, error) {
	panic(fmt.Errorf("not implemented: ListDomains - listDomains"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
